# -*- coding: utf-8 -*-
"""Recommendation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18H4scql3XQtt0gX4nH_KIlrNjLef8K0O
"""

pip install scikit-surprise

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
from sklearn.metrics import mean_squared_error
import numpy as np

# Enhanced sample data with descriptions
data_dict = {
    'title': ['The Matrix', 'Titanic', 'Inception', 'Avatar', 'The Godfather'],
    'genre': ['Action|Sci-Fi', 'Romance|Drama', 'Action|Sci-Fi|Thriller', 'Action|Adventure|Fantasy', 'Crime|Drama'],
    'director': ['Lana Wachowski', 'James Cameron', 'Christopher Nolan', 'James Cameron', 'Francis Ford Coppola'],
    'description': [
        'A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.',
        'A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.',
        'A thief who enters the dreams of others must perform the impossible task of planting an idea into the mind of a CEO.',
        'A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.',
        'The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.'
    ]
}

# Convert to DataFrame
df = pd.DataFrame(data_dict)

# Combine relevant features into a single string
df['combined_features'] = df['genre'] + ' ' + df['director'] + ' ' + df['description']

# Create a TF-IDF Vectorizer
tfidf = TfidfVectorizer(stop_words='english')

# Apply TF-IDF to the combined features
tfidf_matrix = tfidf.fit_transform(df['combined_features'])

# Compute the cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

def evaluate_recommendations(test_data):
    test_df = pd.DataFrame(test_data)
    test_df['combined_features'] = test_df['genre'] + ' ' + test_df['director'] + ' ' + test_df['description']
    test_matrix = tfidf.transform(test_df['combined_features'])

    # Predict similarity scores
    sim_scores = linear_kernel(test_matrix, tfidf_matrix)

    # Flatten the matrix and compute MSE
    true_scores = []
    pred_scores = []

    for i in range(len(test_data)):
        idx = df.index[df['title'] == test_data[i]['title']].tolist()[0]
        true_scores.extend([1] * len(df))  # Simulating true scores as 1 for simplicity
        pred_scores.extend(sim_scores[i])

    mse = mean_squared_error(true_scores, pred_scores)
    print(f"Mean Squared Error of the Recommendations: {mse}")

# Example test data
test_data = [
    {'title': 'The Matrix', 'genre': 'Action|Sci-Fi', 'director': 'Lana Wachowski', 'description': 'A computer hacker learns from mysterious rebels...'},
    {'title': 'Avatar', 'genre': 'Action|Adventure|Fantasy', 'director': 'James Cameron', 'description': 'A paraplegic Marine dispatched to the moon Pandora...'}
]

# Evaluate the recommendation system
evaluate_recommendations(test_data)

def get_recommendations(title, cosine_sim=cosine_sim):
    # Get the index of the movie that matches the title
    idx = df.index[df['title'] == title].tolist()[0]

    # Get the pairwise similarity scores of all movies with that movie
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 5 most similar movies
    sim_scores = sim_scores[1:6]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 5 most similar movies
    return df[['title', 'genre', 'director']].iloc[movie_indices]

# Example: Get top 5 recommendations for 'The Matrix'
print(get_recommendations('The Matrix'))

